1、Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。
2、它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。中间件（Middleware） 是一个函数，
3、中间件的功能包括：执行任何代码、修改请求和响应对象、终结请求-响应循环、调用堆栈中的下一个中间件
4、如果当前中间件没有终结请求-响应循环，则必须调用 next() 方法将控制权交给下一个中间件，否则请求就会挂起。
5、Express 应用可使用如下几种中间件：应用级中间件、路由级中间件、错误处理中间件、内置中间件、第三方中间件


6、应用级中间件绑定到 app 对象 使用 app.use() 和 app.METHOD()， 其中， METHOD 是需要处理的 HTTP 请求的方法，例如 GET, PUT, POST 等等，全部小写。
7、如果需要在中间件栈中跳过剩余中间件，调用 next('route') 方法将控制权交给下一个路由。 注意： next('route') 只对使用 app.VERB() 或 router.VERB() 加载的中间件有效。next('route');


8、路由级中间件和应用级中间件一样，只是它绑定的对象为var router = express.Router();路由级使用router.use()或者router.VERB()加载
// 没有挂载路径的中间件，通过该路由的每个请求都会执行该中间件
var app = express();
var router = express.Router();
router.use(function (req, res, next) {
  console.log('Time:', Date.now());
  next();
});


9、错误处理中间件
错误处理中间件有4个参数，定义错误处理中间件时必须使用这4个参数。即使不需要next对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。
错误处理中间件和其他中间件定义类似，只是要使用 4 个参数，而不是 3 个，其签名如下： (err, req, res, next)。
app.use(function(err,req,res,next){
  console.error(err.stack);
  res.status(500).send('Something broke!');
});

10、内置中间件
从 4.x 版本开始，, Express 已经不再依赖 Connect 了。除了 express.static, Express 以前内置的中间件现在已经全部单独作为模块安装使用了。请参考 中间件列表。
express.static(root, [options])
express.static 是 Express 唯一内置的中间件。它基于 serve-static，负责在 Express 应用中提托管静态资源。参数 root 指提供静态资源的根目录。
可选的 options 参数拥有如下属性。

11、第三方中间件
通过使用第三方中间件从而为 Express 应用增加更多功能。
安装所需功能的 node 模块，并在应用中加载，可以在应用级加载，也可以在路由级加载。
下面的例子安装并加载了一个解析 cookie 的中间件： cookie-parser
$ npm install cookie-parser
var express = require('express');
var app = express();
var cookieParser = require('cookie-parser');
// 加载用于解析 cookie 的中间件
app.use(cookieParser());

